name: "Build Tchap Tauri App"

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      releaseId:
        required: false
        type: string
      args:
        required: false
        type: string
      env:
        required: false
        type: string
        default: prod
    secrets:
      TAURI_SIGNING_PRIVATE_KEY:
        required: true
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD:
        required: true

jobs:
  build-webapp:
    uses: ./.github/workflows/build-webapp.yml
    with:
      platform: ${{ inputs.platform }}
      env: ${{ inputs.env }}

  build-rust:
    runs-on: ${{ inputs.platform }}
    needs: build-webapp
    steps:
      - uses: actions/checkout@v4

      # We need to empty the src directory because the build-webapp workflow will copy the webapp in it
      - name: Empty src directory
        shell: bash
        run: |
          rm -rf src
        if: inputs.platform != 'windows-latest'

      - name: Empty src directory (Windows)
        shell: cmd
        run: |
          if exist src rmdir /s /q src
        if: inputs.platform == 'windows-latest'

      # The result of the build-webapp workflow is an artifact that we need to download
      - name: Download webapp artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp_${{ github.run_id }}
          path: src/

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ inputs.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install SQLCipher for Windows
        if: inputs.platform == 'windows-latest'
        shell: cmd
        run: |
          dir .\src-tauri\
          if exist vcpkg rmdir /s /q vcpkg
          git clone https://github.com/microsoft/vcpkg
          cd vcpkg
          call .\bootstrap-vcpkg.bat -disableMetrics
          call .\vcpkg.exe install sqlcipher:x64-windows-static --clean-after-build
          call .\vcpkg.exe install sqlcipher:x64-windows --clean-after-build
          call .\vcpkg.exe integrate install
          echo VCPKG_ROOT=%CD%>>%GITHUB_ENV%
          echo "SQLCIPHER_USE_VCPKG=1">>%GITHUB_ENV%
          echo "VCPKGRS_DYNAMIC=1">>%GITHUB_ENV%
          echo VCPKG_DEFAULT_TRIPLET=x64-windows>>%GITHUB_ENV%
          echo "VCPKG_INSTALLED_DIR=%CD%\installed">>%GITHUB_ENV%
          echo "LIBCLANG_PATH=%CD%\installed\x64-windows\tools\libclang">>%GITHUB_ENV%
          echo "SQLCIPHER_LIB_DIR=%CD%\installed\x64-windows\lib">>%GITHUB_ENV%
          echo "SQLCIPHER_INCLUDE_DIR=%CD%\installed\x64-windows\include">>%GITHUB_ENV%
          dir installed\x64-windows\lib
          dir installed\x64-windows-static\lib
          .\vcpkg.exe list
          cd ..
          xcopy /y vcpkg\installed\x64-windows\bin\sqlcipher.dll .\src-tauri\
          xcopy /y vcpkg\installed\x64-windows\bin\libcrypto-3-x64.dll .\src-tauri\
          xcopy /y vcpkg\installed\x64-windows\bin\libssl-3-x64.dll .\src-tauri\
          xcopy /y vcpkg\installed\x64-windows\lib\sqlcipher.lib .\src-tauri\
          echo Listing copied files in src-tauri:
          dir .\src-tauri\
          echo Current directory contents:
          dir

      - name: Install SQLCipher for Linux
        if: inputs.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          echo "--- Installing linux dependencies"
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-0 \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf
          echo "--- Installing sqlcipher"
          sudo apt install -y sqlcipher
          echo "--- checking which libsqlcipher package is installed"
          if apt-cache search --names-only '^libsqlcipher0$' | grep -q libsqlcipher0; then
            echo "Installing libsqlcipher0 (provides libsqlcipher.so.0)..."
            sudo apt-get install -y libsqlcipher0
          elif apt-cache search --names-only '^libsqlcipher1$' | grep -q libsqlcipher1; then
            echo "Installing libsqlcipher1 (provides libsqlcipher.so.1)..."
            sudo apt-get install -y libsqlcipher1
          elif apt-cache search --names-only '^libsqlcipher-dev$' | grep -q libsqlcipher-dev; then
            echo "Installing libsqlcipher-dev (may provide libsqlcipher.so)..."
            sudo apt-get install -y libsqlcipher-dev
          else
            echo "No suitable libsqlcipher package found!"
            exit 1
          fi
          echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "Finish installing deps"

      - name: Install SQLCipher for MacOS
        if: inputs.platform == 'macos-latest'
        run: |
          echo "--- Updating brew"
          brew upgrade
          echo "--- Installing sqlcipher"
          brew install sqlcipher
        shell: bash

      - name: install Tauri app
        if: inputs.platform != 'ubuntu-22.04'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ inputs.releaseId }}
          args: ${{ inputs.args }}
          includeDebug: false
          updaterJsonKeepUniversal: true
 
      - name: install Tauri app for linux
        if: inputs.platform == 'ubuntu-22.04'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          NO_STRIP: true
        with:
          releaseId: ${{ inputs.releaseId }}
          args: ${{ inputs.args }}
          includeDebug: true
          updaterJsonKeepUniversal: true